#ifndef EFFHOST_H
#define EFFHOST_H

#include "../default_mode/Host.h"
#include "EfficientWorld.h"

class EfficientHost: public Host {
protected:

  /**
    *
    * Purpose: Represents the efficiency of a host.
    *
  */
  double efficiency;

  /**
    *
    * Purpose: Represents the world that the efficient hosts are living in.
    *
  */
  emp::Ptr<EfficientWorld> my_world = NULL;
public:
  /**
   * The constructor for efficient host
   */
  EfficientHost(emp::Ptr<emp::Random> _random, emp::Ptr<EfficientWorld> _world, emp::Ptr<SymConfigBase> _config,
  double _intval =0.0, emp::vector<emp::Ptr<Organism>> _syms = {},
  emp::vector<emp::Ptr<Organism>> _repro_syms = {},
  std::set<int> _set = std::set<int>(),
  double _points = 0.0, double _efficient = 0.1) :
  Host(_random, _world, _config, _intval, _syms, _repro_syms, _set, _points) {
    efficiency = _efficient;
    my_world = _world;
  }


  /**
   * Input: None
   *
   * Output: None
   *
   * Purpose: To force a copy constructor to be generated by the compiler.
   */
  EfficientHost(const EfficientHost &) = default;


  /**
   * Input: None
   *
   * Output: None
   *
   * Purpose: To force a move constructor to be generated by the compiler
   */
  EfficientHost(EfficientHost &&) = default;


  /**
   * Input: None
   *
   * Output: None
   *
   * Purpose: To tell the compiler to use its default generated variants of the constructor
   */
  EfficientHost() = default;

};
#endif
